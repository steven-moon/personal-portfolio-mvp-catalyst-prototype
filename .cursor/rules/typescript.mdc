---
description: 
globs: 
alwaysApply: false
---
# Description: TypeScript best practices for the Personal Portfolio MVP
# Globs: **/*.ts, **/*.tsx

## TypeScript Best Practices
- Use TypeScript's strict mode
- Prefer interfaces over types for object definitions
- Use type aliases for complex types or unions
- Use enums for limited sets of values
- Use generic types when appropriate
- Define return types for functions
- Use proper TypeScript utilities (Partial, Pick, Omit, etc.)

## Type Definitions
- Create dedicated type files for shared types
- Use descriptive names for types and interfaces
- Use PascalCase for interface and type names
- Document complex types with JSDoc comments
- Use readonly for immutable properties
- Use optional properties (?) when appropriate
- Use union types for variables that can have multiple types

## Type Safety
- Avoid using 'any' type
- Use 'unknown' instead of 'any' when type is uncertain
- Use type assertions only when necessary
- Implement proper error handling with typed errors
- Use nullish coalescing and optional chaining

## Project-Specific Types
- Define types for API responses and requests
- Create types for state management
- Define prop types for components
- Create types for configuration objects

## References
@file ../tsconfig.json
@file ../tsconfig.app.json
@file ../tsconfig.node.json 